---
import { Image } from "astro:assets";
import BookNowButton from "@components/ui/BookNowButton.astro";
import type { IAllClinicsPageProps } from "@components/pages/PagePropsInterface/page_props_interface";
import { GETAllClinicsSiteData } from "@api/api_functions";
import type { IGETAllClinicsResult } from "@api/api_modals";
import { convertTo12HourFormat } from "@utils/global_utils";

const {
  content: { clinicSection },
} = Astro.props;

const { location } =
  Astro.props as IAllClinicsPageProps;

const getAllClinicsresponse = async () => {
  const response = await GETAllClinicsSiteData();
  let datalocation: IGETAllClinicsResult[] = [];
  if (response.status) {
    const res = response.data?.results;
    switch (location) {
      case "gurgaon":
        datalocation = res.filter(
          (e) => e.district === "49814896-3e3d-11ed-9612-1e00da260979"
        );
        break;
      case "delhi":
        datalocation = res.filter(
          (e) => e.district === "62ddc72c-9eed-11ed-b93a-027b5103e28a"
        );
        break;
      case "noida":
        datalocation = res.filter(
          (e) => e.district === "ece8531e-926a-495c-a69c-f32e6d5a668b"
        );
        break;
      case "ghaziabad":
        datalocation = res.filter(
          (e) => e.district === "c48add3c-ca28-11ed-b60d-3fc0f6941078"
        );
        break;
      case "faridabad":
        datalocation = res.filter(
          (e) => e.district === "60362641-1bac-4179-a123-25ffd2453434"
        );
        break;
      case "mumbai":
        datalocation = res.filter(
          (e) => e.district === "352b32b3-49d4-419c-abef-6b2c9b2dcbcd"
        );
        break;
      case "bengaluru":
        datalocation = res.filter(
          (e) => e.district === "ca3f04f6-3ad0-468f-aed8-b0c822a39e50"
        );
        break;
      case "hyderabad":
        datalocation = res.filter(
          (e) => e.district === "ca3f04f6-3ad0-468f-aed8-b0c822a39e51"
        );
        break;
      case "pune":
        datalocation = res.filter(
          (e) => e.district === "352b32b3-49d4-419c-abef-6b2c9b2dcbcb"
        );
        break;
        case "kolkata":
        datalocation = res.filter(
          (e) => e.district === "b1734c53-dd55-4c65-84af-2b22d4c4aee7"
        );
        break;
      default:
        datalocation = res;
    }
  }
  return datalocation;
};

const clinics = await getAllClinicsresponse().then((data) => data);

---
<!-- desktop screen -->
<div class=" w-full mx-auto bg-gradient-to-t from-primaryColor  hidden lg:block my-6 py-4 ">
<div class="container w-11/12 mx-auto py-10" x-data="{ selectedIndex: '1' }">
  <div class="flex flex-col md:flex-row gap-6">
    <!-- Large Carousel -->
    

 
    <div class="w-1/2 relative">
     
      <div
        class="clinic-carousel-large overflow-hidden rounded-2xl border-[1px] border-primaryColor p-2 sm:p-4 bg-white"
        x-ref="largeCarousel" class="carousel-large" >
        {
          clinics.map((clinic) => (

          
            <div class="w-full carousel-cell  ">
              <a href={`/clinics/${location}/${ clinic?.web_url_path }`}>
                <div class="w-[220px] sm:w-full object-cover h-[300px] relative overflow-hidden rounded-xl tracking-image ">
                    <img
                      src={clinic.image_url}
                      alt="Clinic Image"
                      class="w-full h-full object-fill rounded-xl"
                    /> 
        <p
          class="text-xs sm:text-base absolute bottom-0 bg-gray-950 text-white w-full text-center py-1 font-secondaryFont" >  {clinic.name}
        </p>
        <div
          class="flex justify-between items-center w-12 h-6 px-2 bg-gray-950 rounded-full absolute right-2 top-2">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="currentColor"
            class="h-3 w-3 text-yellow-400"
          >
            <path
              fill-rule="evenodd"
              d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.006 5.404.434c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.434 2.082-5.005Z"
              clip-rule="evenodd"></path>
          </svg>
  
          <span
            class="text-[11px] font-bricolage font-semibold mb-2 pt-2 text-white"
            >
              {clinic.rating}
          </span>
        </div>
      </div>
              <div class="bg-white pt-4">
                <div class="flex justify-between">
                  <span class="text-gray-600">Timings</span>
                  <span>
                    {
                        clinic.visiting_hours.friday_start_time &&
                        clinic.visiting_hours.friday_end_time &&
                        (() => {
                            const startTime = clinic.visiting_hours.friday_start_time.substring(0, 5);
                            const endTime = clinic.visiting_hours.friday_end_time.substring(0, 5);

                            const startHours = parseInt(startTime.split(":")[0], 10);
                            const startMinutes = parseInt(startTime.split(":")[1], 10);
                            const endHours = parseInt(endTime.split(":")[0], 10);
                            const endMinutes = parseInt(endTime.split(":")[1], 10);

                            // Calculate the total hours between start and end times
                            const totalHours =
                              endHours + endMinutes / 60 - (startHours + startMinutes / 60);

                            // Handle cases where end time is past midnight (e.g., 21:30 to 02:00)
                            const adjustedTotalHours = totalHours < 0 ? totalHours + 24 : totalHours;

                            if (adjustedTotalHours >= 20) {
                              return "Open 24 hours";
                              } else {
                                return `${convertTo12HourFormat(startTime)} - ${convertTo12HourFormat(
                                  endTime
                              )}`;
                            }
                        })()
                      }
      </span>
                </div>
              </div>
              </a>
            </div>
          ))
        }
      </div>
    </div>
  

    <!-- Small Carousel Desktop -->
    <div class="w-1/2 sm:ml-10">
      <h2 class="text-2xl sm:text-[36px] leading-10 font-primaryFont mb-16">
      <span class="text-primaryFontColor">{clinicSection?.heading1} </span>
        <span >{clinicSection?.heading2}  <br> 
       <span class="text-primaryFontColor">  {clinicSection?.heading3}</span> </span> {clinicSection?.heading4}
      </h2>
      <div
        class="clinic-carousel-small overflow-hidden " x-ref="smallCarousel" class="carousel-small mt-4" >
        {
          clinics.map((clinic, index) => (
          <div
    v-for="(item, index) in items"
    :key="index"
    class="mb-4 border-[1px] rounded-xl mr-8 carousel-cell cursor-pointer p-2 shadow-sm bg-white"
    :class="{ 'border-blue-500': selectedIndex === $el.dataset.index }"
    @click="selectedIndex = $el.dataset.index"
    data-index={index + 1}
>
<a href={`/clinics/${location}/${ clinic?.web_url_path }`}>
<div
        class="w-[250px] object-cover h-[130px] relative overflow-hidden rounded-xl   "
        style={{
          backgroundSize: "cover", 
          backgroundImage: `url("${clinic.image_url}")`
        }} >
        <p
          class="text-xs sm:text-xs absolute bottom-0 bg-gray-950 text-white w-full text-center py-1 font-secondaryFont" >  {clinic.name}
        </p>
        <div
          class="flex justify-between items-center w-12 h-6 px-2 bg-gray-950 rounded-full absolute right-2 top-2">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="currentColor"
            class="h-3 w-3 text-yellow-400"
          >
            <path
              fill-rule="evenodd"
              d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.006 5.404.434c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.434 2.082-5.005Z"
              clip-rule="evenodd"></path>
          </svg>
  
          <span
            class="text-[11px] font-bricolage font-semibold mb-2 pt-2 text-white"
            >
              {clinic.rating}
              
          </span>
        </div>
      </div>
              <div class="mt-1 text-xs">
                <div class="flex justify-between">
                  <span class="text-gray-600">Timings</span>
                  <span>
                    {
                        clinic.visiting_hours.friday_start_time &&
                        clinic.visiting_hours.friday_end_time &&
                        (() => {
                            const startTime = clinic.visiting_hours.friday_start_time.substring(0, 5);
                            const endTime = clinic.visiting_hours.friday_end_time.substring(0, 5);

                            const startHours = parseInt(startTime.split(":")[0], 10);
                            const startMinutes = parseInt(startTime.split(":")[1], 10);
                            const endHours = parseInt(endTime.split(":")[0], 10);
                            const endMinutes = parseInt(endTime.split(":")[1], 10);

                            // Calculate the total hours between start and end times
                            const totalHours =
                              endHours + endMinutes / 60 - (startHours + startMinutes / 60);

                            // Handle cases where end time is past midnight (e.g., 21:30 to 02:00)
                            const adjustedTotalHours = totalHours < 0 ? totalHours + 24 : totalHours;

                            if (adjustedTotalHours >= 20) {
                              return "Open 24 hours";
                              } else {
                                return `${convertTo12HourFormat(startTime)} - ${convertTo12HourFormat(
                                  endTime
                              )}`;
                            }
                        })()
                      }
                   </span>
                </div>
               
              </div>
              </a>
            </div>
          ))
        }
      </div>
      <BookNowButton location={location}
      className=" bg-gray-950 text-white text-center w-44 py-2 rounded-xl font-secondaryFont tracking-button"
    >
      Book Now
    </BookNowButton>
    </div>
    
  </div>
</div>
</div>


<!-- mobile screen -->

<div class=" w-full mx-auto bg-gradient-to-t block lg:hidden from-primaryColor">
  <div class="container w-11/12 mx-auto py-6" x-data="{ selectedIndex: '1' }">
    <div class="flex flex-col md:flex-row gap-6">
      <h2 class="text-2xl sm:text-[36px] leading-8 font-primaryFont ">
        <span class="text-primaryFontColor">{clinicSection?.heading1} </span>
        <span >{clinicSection?.heading2}  <br> 
       <span class="text-primaryFontColor">  {clinicSection?.heading3}</span> </span> {clinicSection?.heading4}
      </h2>
      
      <div class="w-full relative">
        <div
          class="clinic-carousel-large-mobile overflow-hidden rounded-2xl border-[1px] border-primaryColor bg-white"
          x-ref="largeCarousel" >
          {
            clinics.map((clinic) => (
              <div class="w-full carousel-cell  ">
                <a href={`/clinics/${location}/${ clinic?.web_url_path }`}>

        <div class="w-full sm:w-full object-cover h-[300px] sm:h-[260px] relative overflow-hidden rounded-xl tracking-image ">
                    <img
                      src={clinic.image_url}
                      alt="Clinic Image"
                      class="w-full h-full object-fill rounded-xl"
                    />  
          <p class="text-sm sm:text-base absolute bottom-0 bg-gray-950 text-white w-full text-center py-3 font-secondaryFont" >{clinic.name}</p>
          <div
            class="flex justify-between items-center w-12 h-6 px-2 bg-gray-950 rounded-full absolute right-2 top-2">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
              fill="currentColor"
              class="h-3 w-3 text-yellow-400"
            >
              <path
                fill-rule="evenodd"
                d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.006 5.404.434c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.434 2.082-5.005Z"
                clip-rule="evenodd"></path>
            </svg>
    
            <span
              class="text-[11px] font-bricolage font-semibold mb-2 pt-2 text-white"
              >
                {clinic.rating}
            </span>
          </div>
        </div>
                <div class="bg-white p-4">
                  <div class="flex justify-between mb-2">
                    <span class="text-gray-600">Timings</span>
                    <span>
                      {
                        clinic.visiting_hours.friday_start_time &&
                        clinic.visiting_hours.friday_end_time &&
                        (() => {
                            const startTime = clinic.visiting_hours.friday_start_time.substring(0, 5);
                            const endTime = clinic.visiting_hours.friday_end_time.substring(0, 5);

                            const startHours = parseInt(startTime.split(":")[0], 10);
                            const startMinutes = parseInt(startTime.split(":")[1], 10);
                            const endHours = parseInt(endTime.split(":")[0], 10);
                            const endMinutes = parseInt(endTime.split(":")[1], 10);

                            // Calculate the total hours between start and end times
                            const totalHours =
                              endHours + endMinutes / 60 - (startHours + startMinutes / 60);

                            // Handle cases where end time is past midnight (e.g., 21:30 to 02:00)
                            const adjustedTotalHours = totalHours < 0 ? totalHours + 24 : totalHours;

                            if (adjustedTotalHours >= 20) {
                              return "Open 24 hours";
                              } else {
                                return `${convertTo12HourFormat(startTime)} - ${convertTo12HourFormat(
                                  endTime
                              )}`;
                            }
                        })()
                      }
        </span>
                  </div>
                 
                </div>
              </a>
              </div>
            ))
          }
        </div>
        
      </div>
  
     
      <div class="w-full sm:ml-10  ">
        <div
          class="clinic-carousel-small-mobile overflow-hidden "
          x-ref="smallCarousel"
        >
          {
            clinics.map((clinic, index) => (
              <div 
                class=" border-[1px] rounded-xl mr-8 carousel-cell cursor-pointer p-2 shadow-sm bg-white" 
                :class="{ 'border-blue-500': selectedIndex === $el.dataset.index }"
                @click="selectedIndex = $el.dataset.index"
                data-index={index + 1}
               >
                <a href={`/clinics/${location}/${ clinic?.web_url_path }`}>

  <div
          class="w-[250px] object-cover h-[130px] relative overflow-hidden rounded-xl   "
          style={{
            backgroundSize: "cover", 
            backgroundImage: `url("${clinic.image_url}")`
          }} >
          <p
            class="text-xs sm:text-xs absolute bottom-0 bg-gray-950 text-white w-full text-center py-2 font-secondaryFont" >  {clinic.name}
          </p>
          <div
            class="flex justify-between items-center w-12 h-6 px-2 bg-gray-950 rounded-full absolute right-2 top-2">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
              fill="currentColor"
              class="h-3 w-3 text-yellow-400"
            >
              <path
                fill-rule="evenodd"
                d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.006 5.404.434c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.434 2.082-5.005Z"
                clip-rule="evenodd"></path>
            </svg>
    
            <span
              class="text-[11px] font-bricolage font-semibold mb-2 pt-2 text-white"
              >
                {clinic.rating}
                
            </span>
          </div>
        </div>
                <div class="mt-1 text-xs">
                  <div class="flex justify-between">
                    <span class="text-gray-600">Timings</span>
                    <span>
                      {
                        clinic.visiting_hours.friday_start_time &&
                        clinic.visiting_hours.friday_end_time &&
                        (() => {
                            const startTime = clinic.visiting_hours.friday_start_time.substring(0, 5);
                            const endTime = clinic.visiting_hours.friday_end_time.substring(0, 5);

                            const startHours = parseInt(startTime.split(":")[0], 10);
                            const startMinutes = parseInt(startTime.split(":")[1], 10);
                            const endHours = parseInt(endTime.split(":")[0], 10);
                            const endMinutes = parseInt(endTime.split(":")[1], 10);

                            // Calculate the total hours between start and end times
                            const totalHours =
                              endHours + endMinutes / 60 - (startHours + startMinutes / 60);

                            // Handle cases where end time is past midnight (e.g., 21:30 to 02:00)
                            const adjustedTotalHours = totalHours < 0 ? totalHours + 24 : totalHours;

                            if (adjustedTotalHours >= 20) {
                              return "Open 24 hours";
                              } else {
                                return `${convertTo12HourFormat(startTime)} - ${convertTo12HourFormat(
                                  endTime
                              )}`;
                            }
                        })()
                      }
        </span>
                  </div>
                 
                </div>
              </a>
              </div>
            ))
          }
        </div>
      </div>
      <div class="text-center ">
        <BookNowButton location={location}
        className="bg-buttonColor w-full  mx-auto text-white py-3 rounded-xl font-secondaryFont"
      >
        Book Now
      </BookNowButton>
      </div>
    </div>
   </div>
  </div> 


  <script>
    import Flickity from "flickity";
    import "flickity/css/flickity.css";
    
    // Initialize carousels based on screen size
    const initializeCarousels = () => {
      const isMobile = window.matchMedia("(max-width: 768px)").matches;
  
      // Initialize large carousel (Desktop or Tablet)
      if (!isMobile) {
        const largeCarousel = document.querySelector(".clinic-carousel-large");
        if (largeCarousel) {
          const flickityLarge = new Flickity(largeCarousel, {
            cellAlign: "left",
            contain: true,
            prevNextButtons: true,
            pageDots: false,
            draggable: true
          });
  
          // Sync with small carousel
          const smallCarousel = document.querySelector(".clinic-carousel-small");
          if (smallCarousel) {
            const flickitySmall = new Flickity(smallCarousel, {
              cellAlign: "left",
              contain: true,
              pageDots: false,
              prevNextButtons: false,
              draggable: true
            });
  
            flickityLarge.on("change", (index) => {
              flickitySmall.select((index + 1) % flickitySmall.cells.length);
            });
  
            flickitySmall.on("change", (index) => {
              flickityLarge.select((index - 1 + flickityLarge.cells.length) % flickityLarge.cells.length);
            });
  
            // Set initial position for small carousel
            flickitySmall.select(1);
          }
        }
      }
  
      // Initialize mobile carousel (Mobile only)
      if (isMobile) {
        const mobileCarousel = document.querySelector(".clinic-carousel-large-mobile");
        if (mobileCarousel) {
          const flickityMobileLarge = new Flickity(mobileCarousel, {
            cellAlign: "left",
            contain: true,
            prevNextButtons: true,
            pageDots: false,
            draggable: true
          });
  
          const mobileSmallCarousel = document.querySelector(".clinic-carousel-small-mobile");
          if (mobileSmallCarousel) {
            const flickityMobileSmall = new Flickity(mobileSmallCarousel, {
              cellAlign: "left",
              contain: true,
              pageDots: false,
              prevNextButtons: false,
              draggable: true
            });
  
            flickityMobileLarge.on("change", (index) => {
              flickityMobileSmall.select((index + 1) % flickityMobileSmall.cells.length);
            });
  
            flickityMobileSmall.on("change", (index) => {
              flickityMobileLarge.select((index - 1 + flickityMobileLarge.cells.length) % flickityMobileLarge.cells.length);
            });
  
            // Set initial position for mobile small carousel
            flickityMobileSmall.select(1);
          }
        }
      }
    };
  
    // Run the initialization on page load
    window.addEventListener('load', initializeCarousels);
    // Re-initialize when resizing the window (for responsiveness)
    window.addEventListener('resize', initializeCarousels);
  </script>